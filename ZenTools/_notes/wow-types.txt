https://wow.gamepedia.com/API_types
https://wow.gamepedia.com/Category:API_types



https://wow.gamepedia.com/actionID
--
Type: actionID
Index identifying one of the player's action bar slots.

In UI terms, action slots are a layer of abstraction between spells or items and the mechanisms available to the player for using them conveniently. For example, instead of the default UI internally using SetBindingSpell(), SetBindingMacro(), et al whenever the player changes the contents of the visible action bars, it instead manages a set of key bindings corresponding to the action bar slots.

Every player has at least NUM_ACTIONBAR_PAGES * NUM_ACTIONBAR_BUTTONS (in the current client, 6 * 12, or 72) action slots corresponding to the six default action bar pages. In addition, players of certain classes (or with certain talents) may have additional actionIDs available corresponding to the "bonus" action bars that automatically become available when changing stances, stealthing, shapeshifting, etc.





http://wowprogramming.com/docs/api_types.html#itemLocation
--
Type: itemLocation
A bitfield describing the location of an item owned by the player. The bitfield can be decoded using the EquipmentManager_UnpackLocation function, provided by the equipment manager system:

local player, bank, bags, slot, bag = EquipmentManager_UnpackLocation(mask)



http://wowprogramming.com/docs/api/EquipmentManager_UnpackLocation.html
--
Unpacks an inventory location bitfield into usable components
Signature:
player, bank, bags, location or slot, bag = EquipmentManager_UnpackLocation(location)
Arguments:
location - A bit field that represents an item's location in the player's possession. This bit field can be obtained using the GetInventoryItemsForSlot function. (number)
Returns:
player - A flag indicating whether or not the item exists in the player's inventory (i.e. an equipped item). (boolean)
bank - A flag indicating whether or not the item exists in the payer's bank. (boolean)
bags - A flag indicating whether or not the item exists in the player's bags. (boolean)
location or slot - The inventory slot that contains the item, or the container slot that contains the item, if the item is in the player's bags. (number)
bag - The bagID of the container that contains the item. (number)





http://wowprogramming.com/docs/api_types.html#unitID
--
Type: unitID
Used throughout the API to identify units of interest. Possible values:

player - The player him/herself
pet - The player's pet
vehicle - The vehicle currently controlled by the player
target - The player's current target
focus - The player's focused unit (as can be set by typing /focus name)
mouseover - The unit currently under the mouse cursor (applies to both unit frames and units in the 3D world)
none - A valid unit token that always refers to no unit. UnitName() will return "Unknown, nil" for this UnitID. Use to force a macro to not auto self-cast (/cast [target=none] Healing Wave).
npc - The unit the player is currently interacting with (via the Merchant, Trainer, Bank, or similar UI); not necessarily an NPC (e.g. also used in the Trade UI)
party1 to party4 - Another member of the player's party. Indices match the order party member frames are displayed in the default UI (party1 is at the top, party4 at the bottom), but not consistent among party members (i.e. if Thrall and Cairne are in the same party, the player Thrall sees as party2 may not be the same player Cairne sees as party2).
partypet1 to partypet4 - A pet belonging to another member of the player's party
raid1 to raid40 - A member of the player's raid group. Unlike with the party tokens, one of the raid unit IDs will belong to the player. Indices have no relation to the arrangement of units in the default UI.
raidpet1 to raidpet40 - A pet belonging to a member of the player's raid group
boss1 to boss5 - The active bosses of the current encounter if available
arena1 to arena5 - A member of the opposing team in an Arena match
nameplate1 to nameplate40 - A unit corresponding to a given nameplate. Cannot be used in macros
A unitID can also be formed by appending "target" to an existing unitID, referring to that unit's target. This can be done repeatedly. For example, consider a raid situation where the token raid13 refers to a priest: raid13target might be a rogue the priest is healing, raid13targettarget might be the boss monster the rogue is attacking, and raid13targettargettarget might be the warrior tanking the boss.

You can also append "pet" to a unitID to refer to that unit's pet, although it should only be appended once because pets cannot have pets. The unit pet is a shorter (and more efficient) way to write playerpet, but both refer to the same unit. raidpet1 is also the same as raid1pet. A very long unitID such as targettargetpettarget is valid, and will refer to the player's target if the player's target and the player's pet are targeting the player.

Many (but not all) API functions that accept a unitID also accept the name of a unit (assuming that unit is in the player's party or raid). For example, UnitHealth("Cladhaire") will return the same value as UnitHealth("party1") if the unit party1 is the player named Cladhaire. In such situations, a unit's target can still be accessed by appending "-target"; e.g. UnitHealth("Cladhaire-target").




http://wowprogramming.com/docs/api_types.html#guid
--
Type: GUID (Globally Unique IDentifier)
All entities in World of Warcraft are identified by a unique 64-bit number; generally presented as a string containing a hexadecimal representation of the number (e.g. "0xF530007EAC083004"). (Note that Lua in WoW does not support 64-bit integers, so this value cannot be converted with tonumber.)

The type of unit represented by a GUID can be determined by using bit.band() to mask the first three digits with 0x00F: - 0x000 - A player - 0x003 - An NPC - 0x004 - A player's pet (i.e. hunter/warlock pets and similar; non-combat pets count as NPCs) - 0x005 - A vehicle

Further content of the GUID varies by unit type:

Players - The remaining thirteen digits are unique to a player character at least within that character's battlegroup (that is, they remain unique and constant even in cross-server battlegrounds). This number is also semi-permanent -- it persists from character creation until deletion, renaming, or server transfer.

NPCs - Remaining digits can be broken down as follows:

Digits 4-5 - Unused.
Digits 6-10 - NPC creature ID: identifies the specific named NPC (e.g. Hogger, Loque'nahak) or type of NPC (e.g. Sunfury Nethermancer, Shattertusk Mammoth). Converting to decimal results in the ID found on database sites such as wowhead.com; can also be used with [[docs/widgets/PlayerModel/SetCreature|PlayerModel:SetCreature]] to view the NPC's model.
Digits 11-16 - Spawn counter: identifies the individual NPC (i.e. differentiates between the Gamon you recently killed and the Gamon that respawned a few minutes later, or between one Ymirheim Defender and another).
Pets - Hunter pets immediately after taming retain the GUID they had as a wild creature; after resummoning or logout/login, their GUID changes to the pet format. Remaining digits can be broken down as follows:

Digits 4-10 - A constant value unique to the individual pet: like a player's unique ID it is constant across multiple sessions.
Digits 11-16 - Spawn counter: changes when the pet is dismissed and re-summoned.
Vehicles - Same format and content as NPCs.

For example, the GUID 0xF530007EAC083004 can be deconstructed as follows:

digits 1-3 are "F53"; bit.band(0xF53, 0x00F) == 0x003, so this is an NPC
digits 7-10 are "7EAC"; 0x7EAC == 32428, which we can look up to find the NPC is a Underbelly Rat.
digits 11-16 have no intrinsic meaning, but distinguish this Underbelly Rat from all others spawned since the last server reset.
Example Code: a function to decode GUIDs
function ParseGUID(guid)
   local first3 = tonumber("0x"..strsub(guid, 3,5))
   local unitType = bit.band(first3,0x00f)

   if (unitType == 0x000) then
      print("Player, ID #", strsub(guid,6))
   elseif (unitType == 0x003) then
      local creatureID = tonumber("0x"..strsub(guid,7,10))
      local spawnCounter = tonumber("0x"..strsub(guid,11))
      print("NPC, ID #",creatureID,"spawn #",spawnCounter)
   elseif (unitType == 0x004) then
      local petID = tonumber("0x"..strsub(guid,7,10))
      local spawnCounter = tonumber("0x"..strsub(guid,11))
      print("Pet, ID #",petID,"spawn #",spawnCounter)
   elseif (unitType == 0x005) then
      local creatureID = tonumber("0x"..strsub(guid,7,10))
      local spawnCounter = tonumber("0x"..strsub(guid,11))
      print("Vehicle, ID #",creatureID,"spawn #",spawnCounter)
   end
end





http://wowprogramming.com/docs/api_types.html#bitfield
--
Type: bitfield
A value combining several binary flags into one number; the flags can be inspected individually using bitlib functions. For example (using GetItemFamily and related constants):

GetItemFamily("Crystallized Air")
-- returns 1224
bit.bor(0x0008,0x0040,0x0080,0x0400)
-- returns 1224
-- these are the masks for Leatherworking, Enchanting, Engineering, and Mining bags

bit.band(GetItemFamily("Crystallized Air"), 0x0040)
-- returns 64, or 0x0040: the item fits in an Enchanting Bag
bit.band(GetItemFamily("Crystallized Air"), 0x0020)
-- returns 0, or 0x0040: the item does not fit in an Herb Bag




http://wowprogramming.com/docs/api_types.html#auraFilter
--
Type: auraFilter
This parameter can be any of "HELPFUL", "HARMFUL", "PLAYER", "RAID", "CANCELABLE", "NOT_CANCELABLE". You can also specify several filters separated by a | or space character to chain multiple filters together (e.g. "HELPFUL|RAID" or "HELPFUL RAID" == helpful buffs that you can cast on your raid). By default UnitAura has "HELPFUL" as an implicit filter - you cannot get back BOTH helpful and harmful at the same time. Neither "HELPFUL" or "HARMFUL" have meaning for UnitBuff/UnitDebuff, and will be ignored.





http://wowprogramming.com/docs/api_types.html#anchorPoint
--
Type: anchorPoint
String identifying a point relative to the dimensions of a Region; used in frame layout. Possible values:

CENTER
BOTTOM
TOP
LEFT
RIGHT
BOTTOMLEFT
BOTTOMRIGHT
TOPLEFT
TOPRIGHT




http://wowprogramming.com/docs/api_types.html#backdrop
--
Type: backdrop
A backdrop definition is a Lua table with specific attributes, that match directly with the elements in the <Backdrop> definition in an XML definition. It has the following structure:

{
  bgFile = "Interface\\DialogFrame\\UI-DialogBox-Gold-Background",  -- path to the background texture
  edgeFile = "Interface\\DialogFrame\\UI-DialogBox-Gold-Border",    -- path to the border texture
  tile = true,      -- true to repeat the background texture to fill the frame, false to scale it
  tileSize = 32,    -- size (width or height) of the square repeating background tiles (in pixels)
  edgeSize = 32,    -- thickness of edge segments and square size of edge corners (in pixels)
  insets = {        -- distance from the edges of the frame to those of the background texture (in pixels)
    left = 11,
    right = 12,
    top = 12,
    bottom = 11
  }
}





