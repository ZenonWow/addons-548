http://wowprogramming.com/docs/api_types.html#hyperlink
--
Type: hyperlink
A string containing markup allowing the client to present it as a link, which the player can click to view more information about or take action regarding the data it represents.

Hyperlinks take the form |H(linktype):(linkdata)|h(text)|h, where (linktype) determines the type of link, (linkdata) is a code referencing the linked information, and (text) is the text visible to the player. Some API functions which operate on links do not require a full hyperlink, only its linktype:linkdata portion.

Links are often encapsulated in a colorString -- in such cases, the full colorString-wrapped link is the only form of the link allowed to be used in chat; attempting to transmit an invalid link may cause the player to be disconnected from the server.

The WoW client recognizes several kinds of hyperlinks, identified by their linktype. For linkdata elements noted as optional below, the client can still resolve the link if they are omitted:

player (example: |Hplayer:Aerdrig:1:WHISPER:AERDRIG|h[Aerdrig]|h) - Represents a player character. Left-clicking a player link in the default UI opens the ChatFrameEditBox to send a whispered message to the character. Right-clicking opens a menu with options for inviting the character to the player's party/raid, adding the character to the ignore list, or reporting the chat message in which the link appears as spam. The linkdata for a player link consists of the following, separated by colons: the player's name (or in cross-realm battlegrounds, the player's name and home realm separated by a hyphen, e.g. "Gundark-Broxigar"), the lineID of the chat message the link appears in (used for reporting) and the chat type plus chat target of the message. Note that player hyperlinks are only accepted on the local client. Sending them to a chat channel will not work.

playerGM (example: |HplayerGM:Eyonix|h[Eyonix]|h) - A variation on the player type used exclusively for Game Master chat.

glyph (example: |cff66bbff|Hglyph:23:460|h[Glyph of Fortitude]|h|r) - Represents a glyph inscribed in a character's spellbook. Clicking a glyph link in the default UI shows a tooltip with its description. The linkdata for a glyph link follows the format socket:glyphID:

socket (optional) - The socket in which the glyph is placed; values 21 through 26 correspond to [[docs/api_types#glyphIndex|glyphIndex]] values 1 through 6.
glyphID - A unique identifier for the glyph effect; not used elsewhere in the API.
spell (example: |cff71d5ff|Hspell:46584|h[Raise Dead]|h|r) - Represents a spell. Clicking a spell link in the default UI shows a tooltip with its description. The linkdata for a spell link consists solely of the spellID number uniquely identifying the spell, usable with APIs such as GetSpellInfo().

enchant (example: |cffffd000|Henchant:59387|h[Certificate of Ownership]|h|r) - Represents a trade skill recipe (originally used only for Enchanting, but now applies to all trade skills). Clicking a spell link in the default UI shows a tooltip with its description (and that of the item it creates, if applicable). The linkdata for a spell link consists solely of the spellID number uniquely identifying the trade skill recipe, usable with APIs such as GetSpellInfo().

quest (example: |cffffff00|Hquest:982:17|h[Deep Ocean, Vast Sea]|h|r) - Represents a quest from a character's quest log. Clicking a quest link in the default UI shows a tooltip with a brief description of the quest and its objectives. When the client displays a quest link sent by another character, it automatically alters the enclosing colorString to reflect the difficulty of the quest relative to the player's level. The linkdata for a quest link follows the format questID:level:

questID - A unique identifier for the quest; found on database sites (e.g. [[wowhead:quest=982|quest ID 982]]) but not used elsewhere in the API.
level (optional) - Recommended character level for attempting the quest. (A level of -1 means the quest is appropriate for any level; used for holiday quests.)
talent (example: |cff4e96f7|Htalent:1396:4|h[Unleashed Fury]|h|r) - Represents a talent. Clicking a talent link in the default UI shows a tooltip with its description. The linkdata for a talent link follows the format talentID:points:

talentID - A unique identifier for the talent; not used elsewhere in the API.
rank (optional) - Number of points spent in the talent, minus one: if this value is omitted or -1, the tooltip shows the talent as it appears in the Talents UI when zero points have been spent ; if this value is 0 , the tooltip shows the talent as it appears when one point has been spent on it. Values greater than the number of available ranks for a talent are interpreted as -1.
achievement (example: |cffffff00|Hachievement:2336:060000000279E425:1:10:14:8:4294967295:4294967295:4294967295:4294967295|h[Insane in the Membrane]|h|r) - Represents an achievement earned or in progress by a player. Clicking an achievement link in the default UI shows a tooltip with a summary of the achievement and (if applicable) its criteria. The linkdata for an achievement link follows the format achievementID:playerGUID:completed:month:day:year:bits1:bits2:bits3:bits4. If only the first element acheivementID is specified, the client resolving the link will show the player's progress or completion of the achievement; otherwise, all elements are required:

achievementID - A unique identifier for the achievements; usable with various Achievement API functions.
playerGUID (optional) - GUID of a player character whose progress or completion of the achievement is linked (return value of [[docs/api/UnitGUID|`UnitGUID']] without the "0x" prefix).
completed (optional) - 1 if the character has completed the achievement; otherwise 0.
month (optional) - Index of the month (1 = January) in which the character completed the achievement, or 0 if the achievement is incomplete.
day (optional) - Day of the month on which the character completed the achievement, or 0 if the achievement is incomplete.
year (optional) - Year (two-digit year) in which the character completed the achievement, or -1 if the achievement is incomplete.
bits1, bits2, bits3, bits4 (optional) - Encoded data fields interpreted by the client to show completion of achievement criteria.
trade (example: |cffffd000|Htrade:45361:339:375:60000000279E425:Q/nPf6nprU3/n/fA8/Bw/PA+/B+/Aw/HA+/Bw/HA+5nfg////////P////HAAAQAA+DAAAAAAA|h[Inscription]|h|r) - Represents the entire list of recipes for a character's trade skill or profession. The linkdata for an achievement link follows the format spellID:skill:maxSkill:playerGUID:data. If only the first element acheivementID is specified, the client resolving the link will show the player's progress or completion of the achievement; otherwise, all elements are required:

spellID - The [[docs/api_types#spellID|spellID]] number uniquely identifying the trade skill and its rank (e.g. Apprentice Tailoring vs. Journeyman Tailoring), usable with APIs such as [[docs/api/GetSpellInfo|GetSpellInfo()]].
skill - The character's current skill in the profession.
maxSkill - The maximum skill for the character's current rank in the profession (e.g. 375 for Master rank).
playerGUID - GUID of the character whose profession is linked (return value of [[docs/api/UnitGUID|`UnitGUID']] without the "0x" prefix).
data (optional) - Encoded data field interpreted by the client to show the character's list of known trade skill recipes.
item (examples: |cffa335ee|Hitem:45457:3828:3395:3395:0:0:0:0:80:0:0:0|h[Staff of Endless Winter]|h|r, |cffa335ee|Hitem:113602:0:0:0:0:0:0:0:100:0:5:1:566|h[Throat-Ripper Gauntlets]|h|r) - Represents an item. Clicking an item link in the default UI shows a tooltip with information about the item. Control-clicking an equippable item opens the DressUpFrame to preview how the item would look on the player character if equipped. The linkdata for an item link changed in 6.0.2 and now has the format itemID:enchant:gem1:gem2:gem3:gem4:suffixID:uniqueID:level:upgradeId:instanceDifficultyID:numBonusIds:bonusId1:bonusid2:...:

itemID - The item's itemID.
enchant (optional) - Unique identifier of the enchantment applied to the item; not used elsewhere in the API.
gem1, gem2, gem3, gem4 (optional) - Unique identifiers of the enchantments provided by gems socketed in the item (not the itemIDs of the gems themselves); not used elsewhere in the API.
suffixID (optional) - Identifies the specific variation represented for random-property items (e.g. "... of the Monkey", "... of Frost Protection", etc.). A positive number indicates a variation with specific stat values (e.g. 1200 = "of the Bear", 8 stamina 8 strength; 1220 = "of the Bear", 14 stamina 15 strength); a negative number indicates a type of variation, with actual stat values to be determined by decoding the uniqueID.
uniqueID (optional) - A number used internally by the WoW client/server architecture to track a specific occurrence of an item: used for crafted items which display "<Made by Name>" in their tooltips and for random-property items. For items with a negative  suffixID, using bit.band(uniqueID, 0xFFFF) reveals the factor used to calculate the item's stats.
level - Level of the character linking the item; used for "Heirloom" items whose stats change based on the level of the character equipping them.
upgradeId - A number that identifies whether an item can be upgraded, and if so, how many upgrades it's had.
instanceDifficultyID - the item's instanceDifficultyID (dungeon / raid difficulty at which the item can be obtained).
numBonusIds - the number of additional bonus ID's associated with the item. Can be 0 for the base item or any number of additional attributes that modify the base item.
bonusId1, bonusId2 ... - numBonusIds extra bonus modifiers for the item.
levelup (examples: |cffFF4E00|Hlevelup:61:LEVEL_UP_TYPE_CHARACTER|h[Level 61]|h|r) - represents the level up information for a player unit. The linkdatafor a levelup link follows the format  level:type

level - The numeric level the unit has reached
type - This is one of LEVEL_UP_TYPE_CHARACTER, LEVEL_UP_TYPE_PET and LEVEL_UP_TYPE_GUILD and specifies who gained the level
Note: A level up of type LEVEL_UP_TYPE_PET on a non-pet class will display the level up information of the last level up link clicked (or a blank information if none has been clicked since UI load) on non-pet classes.
instancelock (example: |cffff8000|Hinstancelock:01000000003E8E2E7:531:0:15|h[Ahn'Qiraj Temple]|h|r) - represents a player's instance lockout The linkdata for an instancelock link follows the format guid:instanceID:difficulty:bossesDefeated

guid - The GUID of the player the lockout belongs to
instanceID - The ID of the instance
difficulty - Numeric value indicating the difficulty of the lockout
0 - Normal
1 - Heroic 5-man
2 - Heroic raid
bossesDefeated - Bitmask containing which of the encounters have been defeated
journal (example: |cff66bbff|Hjournal:1:192:8|h[Beth'tilac]|h|r) - represents a link to an encounter or instance in the Dungeon Journal The linkdata for an journal link follows the format  contentType:contentID:difficulty

contentType - 2 if the link points to an entry on a boss page, 1 if the link points to the page for an encounter, 0 if the link points to the page for an instance
contentID - the unique ID of the encounter or instance - can be passed to EJ_GetSectionInfo(contentID), EJ_GetEncounterInfo(contentID) and EJ_GetInstanceInfo(contentID) , respectively.
difficulty - indicates the selected difficulty setting for the Dungeon Journal to display. See EJ_SetDifficultyByMask for values.





Type: inventoryID
This is a numeric identifier that is used by the the inventory system to identify a slot in the player's inventory. In World of Warcraft all items that the player 'owns' are part of the player's inventory, including the items they have equipped, the items in the player's bank, the bags that the player has equipped and equipped in the bank, and the keys stored in the player's key ring.

There is a system of API functions that allow you to map from one of these types of locations into an 'inventorySlot' which uniquely identifies that location. For example:

 GetInventorySlotInfo("MainHandSlot")   -- The player's mainhand weapon
 BankButtonIDToInvSlotID(3, 1)      -- The third bag in the player's bank
 BankButtonIDToInvSlotID(5, nil)    -- The fifth slot in the player's bank (not bags)
 ContainerIDToInventoryID(1)        -- The player's first bag slot
 KeyRingButtonIDToInvSlotId(4)      -- The fourth slot in the player's key-ring
In addition and for convenience there are a set of constants defined by the user interface that can be used for the items in the player's 'paper doll' frame. These are defined in FrameXML/Constants.lua and are currently as follows:

 -- Inventory slots
 INVSLOT_AMMO       = 0;
 INVSLOT_HEAD       = 1; INVSLOT_FIRST_EQUIPPED = INVSLOT_HEAD;
 INVSLOT_NECK       = 2;
 INVSLOT_SHOULDER   = 3;
 INVSLOT_BODY       = 4;
 INVSLOT_CHEST      = 5;
 INVSLOT_WAIST      = 6;
 INVSLOT_LEGS       = 7;
 INVSLOT_FEET       = 8;
 INVSLOT_WRIST      = 9;
 INVSLOT_HAND       = 10;
 INVSLOT_FINGER1        = 11;
 INVSLOT_FINGER2        = 12;
 INVSLOT_TRINKET1   = 13;
 INVSLOT_TRINKET2   = 14;
 INVSLOT_BACK       = 15;
 INVSLOT_MAINHAND   = 16;
 INVSLOT_OFFHAND        = 17;
 INVSLOT_RANGED     = 18;
 INVSLOT_TABARD     = 19;
 INVSLOT_LAST_EQUIPPED = INVSLOT_TABARD;
If you choose to use these instead of the appropriate API, you should use the constant name, not the number itself. This ensures that if Blizzard later updates their constants your code should continue to work.

The following are the convenience functions that can be used to obtain inventoryIds:

GetInventorySlotInfo
BankButtonIDToInvSlotID
ContainerIDToInventoryID
KeyRingButtonIDToInvSlotID
Type: itemID
Uniquely identifies an item; usable with APIs such as GetItemInfo(). Also useful with database sites; e.g. item ID 19019.





Type: itemLocation
A bitfield describing the location of an item owned by the player. The bitfield can be decoded using the EquipmentManager_UnpackLocation function, provided by the equipment manager system:

 local player, bank, bags, slot, bag = EquipmentManager_UnpackLocation(mask)
Type: itemQuality
Indicates the quality (or rarity) of an item. Possible values and examples:

0. Poor (gray): Broken I.W.I.N. Button
1. Common (white): Archmage Vargoth's Staff
2. Uncommon (green): X-52 Rocket Helmet
3. Rare / Superior (blue): Onyxia Scale Cloak
4. Epic (purple): Talisman of Ephemeral Power
5. Legendary (orange): Fragment of Val'anyr
6. Artifact (golden yellow): The Twin Blades of Azzinoth
7. Heirloom (light yellow): Bloodied Arcanite Reaper






Type: GUID (Globally Unique IDentifier)
All entities in World of Warcraft are identified by a unique 64-bit number; generally presented as a string containing a hexadecimal representation of the number (e.g. "0xF530007EAC083004"). (Note that Lua in WoW does not support 64-bit integers, so this value cannot be converted with tonumber.)

The type of unit represented by a GUID can be determined by using bit.band() to mask the first three digits with 0x00F: - 0x000 - A player - 0x003 - An NPC - 0x004 - A player's pet (i.e. hunter/warlock pets and similar; non-combat pets count as NPCs) - 0x005 - A vehicle

Further content of the GUID varies by unit type:

Players - The remaining thirteen digits are unique to a player character at least within that character's battlegroup (that is, they remain unique and constant even in cross-server battlegrounds). This number is also semi-permanent -- it persists from character creation until deletion, renaming, or server transfer.

NPCs - Remaining digits can be broken down as follows:

Digits 4-5 - Unused.
Digits 6-10 - NPC creature ID: identifies the specific named NPC (e.g. Hogger, Loque'nahak) or type of NPC (e.g. Sunfury Nethermancer, Shattertusk Mammoth). Converting to decimal results in the ID found on database sites such as wowhead.com; can also be used with [[docs/widgets/PlayerModel/SetCreature|PlayerModel:SetCreature]] to view the NPC's model.
Digits 11-16 - Spawn counter: identifies the individual NPC (i.e. differentiates between the Gamon you recently killed and the Gamon that respawned a few minutes later, or between one Ymirheim Defender and another).
Pets - Hunter pets immediately after taming retain the GUID they had as a wild creature; after resummoning or logout/login, their GUID changes to the pet format. Remaining digits can be broken down as follows:

Digits 4-10 - A constant value unique to the individual pet: like a player's unique ID it is constant across multiple sessions.
Digits 11-16 - Spawn counter: changes when the pet is dismissed and re-summoned.
Vehicles - Same format and content as NPCs.

For example, the GUID 0xF530007EAC083004 can be deconstructed as follows:

digits 1-3 are "F53"; bit.band(0xF53, 0x00F) == 0x003, so this is an NPC
digits 7-10 are "7EAC"; 0x7EAC == 32428, which we can look up to find the NPC is a Underbelly Rat.
digits 11-16 have no intrinsic meaning, but distinguish this Underbelly Rat from all others spawned since the last server reset.
Example Code: a function to decode GUIDs
function ParseGUID(guid)
   local first3 = tonumber("0x"..strsub(guid, 3,5))
   local unitType = bit.band(first3,0x00f)

   if (unitType == 0x000) then
      print("Player, ID #", strsub(guid,6))
   elseif (unitType == 0x003) then
      local creatureID = tonumber("0x"..strsub(guid,7,10))
      local spawnCounter = tonumber("0x"..strsub(guid,11))
      print("NPC, ID #",creatureID,"spawn #",spawnCounter)
   elseif (unitType == 0x004) then
      local petID = tonumber("0x"..strsub(guid,7,10))
      local spawnCounter = tonumber("0x"..strsub(guid,11))
      print("Pet, ID #",petID,"spawn #",spawnCounter)
   elseif (unitType == 0x005) then
      local creatureID = tonumber("0x"..strsub(guid,7,10))
      local spawnCounter = tonumber("0x"..strsub(guid,11))
      print("Vehicle, ID #",creatureID,"spawn #",spawnCounter)
   end
end






Type: colorString
Formatting used to colorize sections of text when displayed in a FontString. Color strings take the form |c(colorvalue)(text)|r:

(colorvalue) - A string of four hexadecimal-formatted bytes describing component values of the color. Each byte can be a value from 00 (representing zero intensity of the component) to ff (representing full intensity of the component):
Nominally alpha value, but currently unused: always ff.
Red component of the color
Green component of the color
Blue component of the color
(text) - The text to be colorized.
Examples: |cffffff00(bright yellow)|r, |cff0070dd(rare item blue)|r, |cff40c040(easy quest green)|r

Color strings can be used for display anywhere in the UI, can only be delivered in chat messages if used as part of a hyperlink.






Type: containerID
Identifies one of the player's bags or other containers. Possible values:

REAGENTBANK_CONTAINER: Reagent bank (-3)
KEYRING_CONTAINER: Keyring and currency bag (-2)
BANK_CONTAINER Main storage area in the bank (-1)
BACKPACK_CONTAINER: Backpack (0)
1 through NUM_BAG_SLOTS: Bag slots (as presented in the default UI, numbered right to left)
NUM_BAG_SLOTS + 1 through NUM_BAG_SLOTS + NUM_BANKBAGSLOTS: Bank bag slots (as presented in the default UI, numbered left to right)
Type: containerSlotID
Index of an item slot within a container. Slots are numbered (as presented in the default UI) left-to-right, top-to-bottom, starting with the leftmost slot on the top row.





Type: bitfield
A value combining several binary flags into one number; the flags can be inspected individually using bitlib functions. For example (using GetItemFamily and related constants):

GetItemFamily("Crystallized Air")
-- returns 1224
bit.bor(0x0008,0x0040,0x0080,0x0400)
-- returns 1224
-- these are the masks for Leatherworking, Enchanting, Engineering, and Mining bags

bit.band(GetItemFamily("Crystallized Air"), 0x0040)
-- returns 64, or 0x0040: the item fits in an Enchanting Bag
bit.band(GetItemFamily("Crystallized Air"), 0x0020)
-- returns 0, or 0x0040: the item does not fit in an Herb Bag







Type: auraFilter
This parameter can be any of "HELPFUL", "HARMFUL", "PLAYER", "RAID", "CANCELABLE", "NOT_CANCELABLE". You can also specify several filters separated by a | or space character to chain multiple filters together (e.g. "HELPFUL|RAID" or "HELPFUL RAID" == helpful buffs that you can cast on your raid). By default UnitAura has "HELPFUL" as an implicit filter - you cannot get back BOTH helpful and harmful at the same time. Neither "HELPFUL" or "HARMFUL" have meaning for UnitBuff/UnitDebuff, and will be ignored.





Type: backdrop
A backdrop definition is a Lua table with specific attributes, that match directly with the elements in the <Backdrop> definition in an XML definition. It has the following structure:

{
  bgFile = "Interface\\DialogFrame\\UI-DialogBox-Gold-Background",  -- path to the background texture
  edgeFile = "Interface\\DialogFrame\\UI-DialogBox-Gold-Border",    -- path to the border texture
  tile = true,      -- true to repeat the background texture to fill the frame, false to scale it
  tileSize = 32,    -- size (width or height) of the square repeating background tiles (in pixels)
  edgeSize = 32,    -- thickness of edge segments and square size of edge corners (in pixels)
  insets = {        -- distance from the edges of the frame to those of the background texture (in pixels)
    left = 11,
    right = 12,
    top = 12,
    bottom = 11
  }
}






Type: anchorPoint
String identifying a point relative to the dimensions of a Region; used in frame layout. Possible values:

CENTER
BOTTOM
TOP
LEFT
RIGHT
BOTTOMLEFT
BOTTOMRIGHT
TOPLEFT
TOPRIGHT





Type: actionID
Index identifying one of the player's action bar slots.

In UI terms, action slots are a layer of abstraction between spells or items and the mechanisms available to the player for using them conveniently. For example, instead of the default UI internally using SetBindingSpell(), SetBindingMacro(), et al whenever the player changes the contents of the visible action bars, it instead manages a set of key bindings corresponding to the action bar slots.

Every player has at least NUM_ACTIONBAR_PAGES * NUM_ACTIONBAR_BUTTONS (in the current client, 6 * 12, or 72) action slots corresponding to the six default action bar pages. In addition, players of certain classes (or with certain talents) may have additional actionIDs available corresponding to the "bonus" action bars that automatically become available when changing stances, stealthing, shapeshifting, etc.





