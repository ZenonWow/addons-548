https://wow.gamepedia.com/API_GetItemInfo
--
Return information about a specific item.
itemName, itemLink, itemRarity, itemLevel, itemMinLevel, itemType, itemSubType, itemStackCount,
itemEquipLoc, itemIcon, itemSellPrice, itemClassID, itemSubClassID, bindType, expacID, itemSetID, 
isCraftingReagent = GetItemInfo(itemID or "itemString" or "itemName" or "itemLink") 
--Patch 7.1.0 (2016-10-25): Added bindType, expacID, itemSetID, and isCraftingReagent.

Arguments
One of the following four ways to specify which item to query:
itemId 
Number - Numeric ID of the item. e.g. 30234 for  [Nordrassil Wrath-Kilt]
itemName 
String - Name of an item owned by the player at some point during this play session, e.g. "Nordrassil Wrath-Kilt".
itemString 
String - A fragment of the itemString for the item, e.g. "item:30234:0:0:0:0:0:0:0" or "item:30234".
itemLink 
String - The full itemLink.

Returns
1. itemName
String - The localized name of the item.
2. itemLink
String - The localized item link of the item.
3. itemRarity
Number - The quality of the item. The value is 0 to 7, which represents Poor to Heirloom. This appears to include gains from upgrades/bonuses.
4. itemLevel
Number - The base item level of this item, not including item levels gained from upgrades. Use GetDetailedItemLevelInfo to get the actual current level of the item.
5. itemMinLevel
Number - The minimum level required to use the item, 0 meaning no level requirement.
6. itemType
String - The localized type of the item: Armor, Weapon, Quest, Key, etc.
7. itemSubType
String - The localized sub-type of the item: Enchanting, Cloth, Sword, etc. See itemType.
8. itemStackCount
Number - How many of the item per stack: 20 for Runecloth, 1 for weapon, 100 for Alterac Ram Hide, etc.
9. itemEquipLoc
String - The type of inventory equipment location in which the item may be equipped, or "" if it can't be equippable. The string returned is also the name of a global string variable e.g. if "INVTYPE_WEAPONMAINHAND" is returned, _G["INVTYPE_WEAPONMAINHAND"] will be the localized, displayable name of the location.
10. itemIcon
Number (fileID) - The icon texture for the item.
11. itemSellPrice
Number - The price, in copper, a vendor is willing to pay for this item, 0 for items that cannot be sold.
12. itemClassID
Number - This is the numerical value that determines the string to display for 'itemType'.
13. itemSubClassID
Number - This is the numerical value that determines the string to display for 'itemSubType'
14. bindType
Number - Item binding type: 0 - none; 1 - on pickup; 2 - on equip; 3 - on use; 4 - quest.
15. expacID
Number - ?
16. itemSetID
Number - ?
17. isCraftingReagent
Boolean - ?
Details
If the item hasn't been encountered since the game client was last started, this function will initially return nil, but will asynchronously query the server to obtain the missing data, triggering GET_ITEM_INFO_RECEIVED when the information is available.
Patch changes
 Patch 7.1.0 (2016-10-25): Added bindType, expacID, itemSetID, and isCraftingReagent.
 Patch 7.0.3 (2016-07-19): Item icon is now returned as a fileID rather than a path. Additionally, two new returns were added: itemClassID and itemSubClassID.
See Also
GetItemInfoInstant
GetContainerItemInfo




https://wow.gamepedia.com/ItemString
--
Item strings consist of the string "item:" followed by additional colon delimited numbers, which describe the item, its stats, and any enchantments or gems applied to the item. As of 7.0.3 unused delimited segments will be empty rather than 0 (the old ":0:0:0:" is now "::::").

item:itemID:enchantID:gemID1:gemID2:gemID3:gemID4:suffixID:uniqueID:linkLevel:specializationID:upgradeTypeID:instanceDifficultyID:numBonusIDs[:bonusID1:bonusID2:...][:upgradeValue1:upgradeValue2:...]:relic1NumBonusIDs[:relic1BonusID1:relic1BonusID2:...]:relic2NumBonusIDs[:relic2BonusID1:relic2BonusID2:...]:relic3NumBonusIDs[:relic3BonusID1:relic3BonusID2:...]
itemID 
Item ID that can be used for GetItemInfo calls.
enchantID
Permament enchants applied to an item. See list of EnchantIds.
gemID1, gemID2, gemID3, gemID4 
Embedded gems re-use EnchantId indices, though gem icons show only for specific values. Added in Patch 2.0.
suffixID 
Random enchantment ID; may be negative. See list of SuffixIds.
uniqueID 
Data pertaining to a specific instance of the item.
linkLevel 
Level of the character supplying the link. This is used to render scaling heirloom item tooltips at the proper level. Added in Patch 3.0.
specializationID 
Class specialization ID of the character supplying the link. This is used to display the appropriate primary stat and set bonuses on gear. Added in Patch 6.2.0.
upgradeTypeID 
The type of upgrade available on the gear. This is used in conjunction with the upgradeValue. Added in Patch 6.2.0.
instanceDifficultyID
Dungeon/raid difficulty in which this item is obtained. Added in Patch 6.0.2.
numBonusIDs
The number of bonusIDs. Added in Patch 6.0.2.
bonusID1, bonusID2, ... 
Data describing how the item differs from a generic instance of its base Item ID. Added in Patch 6.0.2. See below for more info.
upgradeValue1, upgradeValue2, ... 
Item upgrade info used in conjunction with the upgradeTypeID. Added in Patch 5.1 modified for use with upgradeTypeID in Patch 6.2.0. These segments of the item string will be omitted if the upgradeTypeID is 0 or "". See below for various types of upgrade values.
relic1NumBonusIDs, ... 
The number of bonusIDs for the socketed artifact relic. Added in Patch 7.0.3.
relic1BonusID1, relic1BonusID2, ...
Data describing how the socketed artifact relic differs from a generic instance of its base Item ID. Added in Patch 7.0.3.
NOTE: ItemStrings obtained from Void Storage links may not be entirely accurate. Shift clicking an item in Void Storage will give you a generic GetItemInfo link without modifier information such as the upgradeType or bonusID's (this remains true as of patch 7.0.3).




http://wowprogramming.com/docs/api_types.html#itemString
--
Type: itemString
Refers to the linktype:linkdata portion of an item link (the part containing the itemID, e.g. item:19019); see hyperlink for details.

See also
http://wowwiki.wikia.com/wiki/UI_escape_sequences




https://wow.gamepedia.com/ItemLink
--
itemLinks are returned by several functions, e.g. GetAuctionItemLink(), GetContainerItemLink(), GetInventoryItemLink(), etc.
In essence, they are itemStrings with additional formatting to make in-game text controls display them as clickable hyperlinks.
|cff9d9d9d|Hitem:7073:0:0:0:0:0:0:0:80:0|h[Broken Fang]|h|r

Broken up in its components:
"|cff9d9d9d" – Colorizes the link with a medium grey color (hex color code)
The first two characters after pipe-c may be the alpha level, where ff is fully opaque.
The next three sets of two characters represent the red, green, and blue levels, just like HTML.
"|H" – "Hyperlink link data starts here"
"item:7073:0:0:0:0:0:0:0:0:0" – An informational string for the item.
"|h" – "End of link, text follows"
"[Broken Fang]" – The actual text displayed
"|h" – "End of hyperlink"
"|r" – Restores color to normal

You can extract the itemString from a given itemLink with the following function:
local itemString = string.match(itemLink, "item[%-?%d:]+")
Note: The information string will be an itemString for most items, but there are a few exceptions:

battlepet String - Caged Battle Pets
keystone String - Mythic Keystones
enchant String
quest String
spell String

To obtain all the data within a hyperlink, you can use the following:
local _, _, Color, Ltype, Id, Enchant, Gem1, Gem2, Gem3, Gem4, Suffix, Unique, LinkLvl, reforging, Name = string.find(itemLink, "|?c?f?f?(%x*)|?H?([^:]*):?(%d+):?(%d*):?(%d*):?(%d*):?(%d*):?(%d*):?(%-?%d*):?(%-?%d*):?(%d*):?(%d*)|?h?%[?([^%[%]]*)%]?|?h?|?r?")
Note that this will accept any hyperlink (item/spell/quest/talent/achievement/tradeskill/etc), it will take itemstrings alone, or even just a single number.
Note that linklevel was added in 3.0, and reforging stat was added in 4.0. Links stored from previous revisions may have problems being parsed with current code.

Printing links for debug
Printing out the contents of an item link is perhaps not so obvious; displaying it anywhere in-game will just show you a clickable link. Reformat it slightly to ruin the escape sequences and you'll see what it really looks like:
link = GetContainerItemLink(0, 1);
printable = gsub(link, "\124", "\124\124");
ChatFrame1:AddMessage("Here's what it really looks like: \"" .. printable .. "\"");
"124" is the ascii value of the "|" character. If you are writing this in a regular .lua file, feel free to go ahead and just use "|" and "||". However, if you're typing it in an in-game editor, it's better to use the ascii code escape to avoid problems.




http://wowprogramming.com/docs/api_types.html#hyperlink
--
Type: hyperlink
A string containing markup allowing the client to present it as a link, which the player can click to view more information about or take action regarding the data it represents.

Hyperlinks take the form |H(linktype):(linkdata)|h(text)|h, where (linktype) determines the type of link, (linkdata) is a code referencing the linked information, and (text) is the text visible to the player. Some API functions which operate on links do not require a full hyperlink, only its linktype:linkdata portion.

Links are often encapsulated in a colorString -- in such cases, the full colorString-wrapped link is the only form of the link allowed to be used in chat; attempting to transmit an invalid link may cause the player to be disconnected from the server.

The WoW client recognizes several kinds of hyperlinks, identified by their linktype. For linkdata elements noted as optional below, the client can still resolve the link if they are omitted:

player (example: |Hplayer:Aerdrig:1:WHISPER:AERDRIG|h[Aerdrig]|h) - Represents a player character. Left-clicking a player link in the default UI opens the ChatFrameEditBox to send a whispered message to the character. Right-clicking opens a menu with options for inviting the character to the player's party/raid, adding the character to the ignore list, or reporting the chat message in which the link appears as spam. The linkdata for a player link consists of the following, separated by colons: the player's name (or in cross-realm battlegrounds, the player's name and home realm separated by a hyphen, e.g. "Gundark-Broxigar"), the lineID of the chat message the link appears in (used for reporting) and the chat type plus chat target of the message. Note that player hyperlinks are only accepted on the local client. Sending them to a chat channel will not work.

playerGM (example: |HplayerGM:Eyonix|h[Eyonix]|h) - A variation on the player type used exclusively for Game Master chat.

glyph (example: |cff66bbff|Hglyph:23:460|h[Glyph of Fortitude]|h|r) - Represents a glyph inscribed in a character's spellbook. Clicking a glyph link in the default UI shows a tooltip with its description. The linkdata for a glyph link follows the format socket:glyphID:

socket (optional) - The socket in which the glyph is placed; values 21 through 26 correspond to [[docs/api_types#glyphIndex|glyphIndex]] values 1 through 6.
glyphID - A unique identifier for the glyph effect; not used elsewhere in the API.
spell (example: |cff71d5ff|Hspell:46584|h[Raise Dead]|h|r) - Represents a spell. Clicking a spell link in the default UI shows a tooltip with its description. The linkdata for a spell link consists solely of the spellID number uniquely identifying the spell, usable with APIs such as GetSpellInfo().

enchant (example: |cffffd000|Henchant:59387|h[Certificate of Ownership]|h|r) - Represents a trade skill recipe (originally used only for Enchanting, but now applies to all trade skills). Clicking a spell link in the default UI shows a tooltip with its description (and that of the item it creates, if applicable). The linkdata for a spell link consists solely of the spellID number uniquely identifying the trade skill recipe, usable with APIs such as GetSpellInfo().

quest (example: |cffffff00|Hquest:982:17|h[Deep Ocean, Vast Sea]|h|r) - Represents a quest from a character's quest log. Clicking a quest link in the default UI shows a tooltip with a brief description of the quest and its objectives. When the client displays a quest link sent by another character, it automatically alters the enclosing colorString to reflect the difficulty of the quest relative to the player's level. The linkdata for a quest link follows the format questID:level:

questID - A unique identifier for the quest; found on database sites (e.g. [[wowhead:quest=982|quest ID 982]]) but not used elsewhere in the API.
level (optional) - Recommended character level for attempting the quest. (A level of -1 means the quest is appropriate for any level; used for holiday quests.)
talent (example: |cff4e96f7|Htalent:1396:4|h[Unleashed Fury]|h|r) - Represents a talent. Clicking a talent link in the default UI shows a tooltip with its description. The linkdata for a talent link follows the format talentID:points:

talentID - A unique identifier for the talent; not used elsewhere in the API.
rank (optional) - Number of points spent in the talent, minus one: if this value is omitted or -1, the tooltip shows the talent as it appears in the Talents UI when zero points have been spent ; if this value is 0 , the tooltip shows the talent as it appears when one point has been spent on it. Values greater than the number of available ranks for a talent are interpreted as -1.
achievement (example: |cffffff00|Hachievement:2336:060000000279E425:1:10:14:8:4294967295:4294967295:4294967295:4294967295|h[Insane in the Membrane]|h|r) - Represents an achievement earned or in progress by a player. Clicking an achievement link in the default UI shows a tooltip with a summary of the achievement and (if applicable) its criteria. The linkdata for an achievement link follows the format achievementID:playerGUID:completed:month:day:year:bits1:bits2:bits3:bits4. If only the first element acheivementID is specified, the client resolving the link will show the player's progress or completion of the achievement; otherwise, all elements are required:

achievementID - A unique identifier for the achievements; usable with various Achievement API functions.
playerGUID (optional) - GUID of a player character whose progress or completion of the achievement is linked (return value of [[docs/api/UnitGUID|`UnitGUID']] without the "0x" prefix).
completed (optional) - 1 if the character has completed the achievement; otherwise 0.
month (optional) - Index of the month (1 = January) in which the character completed the achievement, or 0 if the achievement is incomplete.
day (optional) - Day of the month on which the character completed the achievement, or 0 if the achievement is incomplete.
year (optional) - Year (two-digit year) in which the character completed the achievement, or -1 if the achievement is incomplete.
bits1, bits2, bits3, bits4 (optional) - Encoded data fields interpreted by the client to show completion of achievement criteria.
trade (example: |cffffd000|Htrade:45361:339:375:60000000279E425:Q/nPf6nprU3/n/fA8/Bw/PA+/B+/Aw/HA+/Bw/HA+5nfg////////P////HAAAQAA+DAAAAAAA|h[Inscription]|h|r) - Represents the entire list of recipes for a character's trade skill or profession. The linkdata for an achievement link follows the format spellID:skill:maxSkill:playerGUID:data. If only the first element acheivementID is specified, the client resolving the link will show the player's progress or completion of the achievement; otherwise, all elements are required:

spellID - The [[docs/api_types#spellID|spellID]] number uniquely identifying the trade skill and its rank (e.g. Apprentice Tailoring vs. Journeyman Tailoring), usable with APIs such as [[docs/api/GetSpellInfo|GetSpellInfo()]].
skill - The character's current skill in the profession.
maxSkill - The maximum skill for the character's current rank in the profession (e.g. 375 for Master rank).
playerGUID - GUID of the character whose profession is linked (return value of [[docs/api/UnitGUID|`UnitGUID']] without the "0x" prefix).
data (optional) - Encoded data field interpreted by the client to show the character's list of known trade skill recipes.
item (examples: |cffa335ee|Hitem:45457:3828:3395:3395:0:0:0:0:80:0:0:0|h[Staff of Endless Winter]|h|r, |cffa335ee|Hitem:113602:0:0:0:0:0:0:0:100:0:5:1:566|h[Throat-Ripper Gauntlets]|h|r) - Represents an item. Clicking an item link in the default UI shows a tooltip with information about the item. Control-clicking an equippable item opens the DressUpFrame to preview how the item would look on the player character if equipped. The linkdata for an item link changed in 6.0.2 and now has the format itemID:enchant:gem1:gem2:gem3:gem4:suffixID:uniqueID:level:upgradeId:instanceDifficultyID:numBonusIds:bonusId1:bonusid2:...:

itemID - The item's itemID.
enchant (optional) - Unique identifier of the enchantment applied to the item; not used elsewhere in the API.
gem1, gem2, gem3, gem4 (optional) - Unique identifiers of the enchantments provided by gems socketed in the item (not the itemIDs of the gems themselves); not used elsewhere in the API.
suffixID (optional) - Identifies the specific variation represented for random-property items (e.g. "... of the Monkey", "... of Frost Protection", etc.). A positive number indicates a variation with specific stat values (e.g. 1200 = "of the Bear", 8 stamina 8 strength; 1220 = "of the Bear", 14 stamina 15 strength); a negative number indicates a type of variation, with actual stat values to be determined by decoding the uniqueID.
uniqueID (optional) - A number used internally by the WoW client/server architecture to track a specific occurrence of an item: used for crafted items which display "<Made by Name>" in their tooltips and for random-property items. For items with a negative  suffixID, using bit.band(uniqueID, 0xFFFF) reveals the factor used to calculate the item's stats.
level - Level of the character linking the item; used for "Heirloom" items whose stats change based on the level of the character equipping them.
upgradeId - A number that identifies whether an item can be upgraded, and if so, how many upgrades it's had.
instanceDifficultyID - the item's instanceDifficultyID (dungeon / raid difficulty at which the item can be obtained).
numBonusIds - the number of additional bonus ID's associated with the item. Can be 0 for the base item or any number of additional attributes that modify the base item.
bonusId1, bonusId2 ... - numBonusIds extra bonus modifiers for the item.
levelup (examples: |cffFF4E00|Hlevelup:61:LEVEL_UP_TYPE_CHARACTER|h[Level 61]|h|r) - represents the level up information for a player unit. The linkdatafor a levelup link follows the format  level:type

level - The numeric level the unit has reached
type - This is one of LEVEL_UP_TYPE_CHARACTER, LEVEL_UP_TYPE_PET and LEVEL_UP_TYPE_GUILD and specifies who gained the level
Note: A level up of type LEVEL_UP_TYPE_PET on a non-pet class will display the level up information of the last level up link clicked (or a blank information if none has been clicked since UI load) on non-pet classes.
instancelock (example: |cffff8000|Hinstancelock:01000000003E8E2E7:531:0:15|h[Ahn'Qiraj Temple]|h|r) - represents a player's instance lockout The linkdata for an instancelock link follows the format guid:instanceID:difficulty:bossesDefeated

guid - The GUID of the player the lockout belongs to
instanceID - The ID of the instance
difficulty - Numeric value indicating the difficulty of the lockout
0 - Normal
1 - Heroic 5-man
2 - Heroic raid
bossesDefeated - Bitmask containing which of the encounters have been defeated
journal (example: |cff66bbff|Hjournal:1:192:8|h[Beth'tilac]|h|r) - represents a link to an encounter or instance in the Dungeon Journal The linkdata for an journal link follows the format  contentType:contentID:difficulty

contentType - 2 if the link points to an entry on a boss page, 1 if the link points to the page for an encounter, 0 if the link points to the page for an instance
contentID - the unique ID of the encounter or instance - can be passed to EJ_GetSectionInfo(contentID), EJ_GetEncounterInfo(contentID) and EJ_GetInstanceInfo(contentID) , respectively.
difficulty - indicates the selected difficulty setting for the Dungeon Journal to display. See EJ_SetDifficultyByMask for values.



http://wowwiki.wikia.com/wiki/UI_escape_sequences
--






http://wowprogramming.com/docs/api_types.html#itemQuality
--
Type: itemQuality
Indicates the quality (or rarity) of an item. Possible values and examples:

0. Poor (gray): Broken I.W.I.N. Button
1. Common (white): Archmage Vargoth's Staff
2. Uncommon (green): X-52 Rocket Helmet
3. Rare / Superior (blue): Onyxia Scale Cloak
4. Epic (purple): Talisman of Ephemeral Power
5. Legendary (orange): Fragment of Val'anyr
6. Artifact (golden yellow): The Twin Blades of Azzinoth
7. Heirloom (light yellow): Bloodied Arcanite Reaper



http://wowprogramming.com/docs/api_types.html#colorString
--
Type: colorString
Formatting used to colorize sections of text when displayed in a FontString. Color strings take the form |c(colorvalue)(text)|r:

(colorvalue) - A string of four hexadecimal-formatted bytes describing component values of the color. Each byte can be a value from 00 (representing zero intensity of the component) to ff (representing full intensity of the component):
Nominally alpha value, but currently unused: always ff.
Red component of the color
Green component of the color
Blue component of the color
(text) - The text to be colorized.
Examples: |cffffff00(bright yellow)|r, |cff0070dd(rare item blue)|r, |cff40c040(easy quest green)|r

Color strings can be used for display anywhere in the UI, can only be delivered in chat messages if used as part of a hyperlink.



https://wow.gamepedia.com/Class_colors
--
Each class has its own color defined to it in the default UI, per the raid system. The below color codes are held in the RAID_CLASS_COLORS table in SharedXML/Util.lua.

Class	RGB
(0-255)	RGB
(0.0-1.0)	RGB Hex
(00-FF)	Description
Death Knight	196	31	59	0.77	0.12	0.23	#C41F3B	Red †
Demon Hunter	163	48	201	0.64	0.19	0.79	#A330C9	Dark Magenta
Druid	255	125	10	1.00	0.49	0.04	#FF7D0A	Orange
Hunter	171	212	115	0.67	0.83	0.45	#ABD473	Green
Mage	64	199	235	0.25	0.78	0.92	#40C7EB	Light Blue
Monk	0	255	150	0.00	1.00	0.59	#00FF96	Spring Green
Paladin	245	140	186	0.96	0.55	0.73	#F58CBA	Pink
Priest	255	255	255	1.00	1.00	1.00	#FFFFFF	White*
Rogue	255	245	105	1.00	0.96	0.41	#FFF569	Yellow*
Shaman	0	112	222	0.00	0.44	0.87	#0070DE	Blue
Warlock	135	135	237	0.53	0.53	0.93	#8787ED	Purple
Warrior	199	156	110	0.78	0.61	0.43	#C79C6E	Tan

† The Death Knight class color closely matches the "redlink" color (dead local link or missing page color) on most wikis, including Wowpedia.
*The text color shown does not match the color code to allow for readability on all skins.



